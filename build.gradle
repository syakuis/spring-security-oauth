buildscript {
    ext {
        groupId = "io.github.syakuis.identity"
        versionName = "1.0.0-SNAPSHOT"
        springBootVersion = "2.4.13"
        springCloudVersion = "2020.0.3"
        jacksonVersion = '2.13.3'
        junitVersion = "5.6.2"
        lombokVersion = '1.18.24'
        mapStructVersion = '1.5.1.Final'
        mapstructExtensionsVersion = '0.1.1'
        lombokMapstructVersion = '0.2.0'
        querydslVersion = '5.0.0'
        springSecurityOAuth2Version = "2.3.8.RELEASE"
//        h2Version = '2.1.212'
        h2Version = '1.4.200'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
    }
}

subprojects {

    wrapper {
        gradleVersion = "7.4.2"
    }

    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    repositories {
        mavenCentral()
    }

    group groupId
    version versionName

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    compileJava.options.encoding = 'UTF-8'

    configurations {
        implementation.exclude module: "spring-boot-starter-tomcat"
        querydsl.extendsFrom compileClasspath
    }

    processResources {
        filesMatching('*.yml') {
            expand(project.properties)
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation 'org.apache.commons:commons-lang3:3.12.0'

        implementation "org.mapstruct:mapstruct:${mapStructVersion}"
        implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapstructExtensionsVersion}"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

        annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapstructExtensionsVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructVersion}"

        testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapstructExtensionsVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructVersion}"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        implementation "org.springframework.boot:spring-boot-starter-validation"

        implementation "org.springframework.boot:spring-boot-starter-undertow"
        implementation "org.springframework.boot:spring-boot-starter-web"
        testImplementation "org.springframework.boot:spring-boot-starter-test"

        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${jacksonVersion}"

        implementation "com.querydsl:querydsl-core:${querydslVersion}"
        implementation "com.querydsl:querydsl-jpa:${querydslVersion}"
        annotationProcessor(
                "jakarta.persistence:jakarta.persistence-api",
                "jakarta.annotation:jakarta.annotation-api",
                "com.querydsl:querydsl-apt:${querydslVersion}:jpa"
        )

        testImplementation "com.h2database:h2:${h2Version}"
        compileOnly "com.h2database:h2:${h2Version}"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        systemProperty 'spring.profiles.active', 'test'
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}